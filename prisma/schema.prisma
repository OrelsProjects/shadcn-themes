// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AppUser {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @unique
  email       String  @unique
  password    String?
  displayName String?
  photoURL    String?

  meta     AppUserMetadata?
  settings AppUserSettings?
  Payment  Payment[]

  @@map("appUser")
}

model AppUserMetadata {
  appUserMetadataId String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @unique

  paidStatus String? // "free" | "premium"

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("appUserMetadata")
}

model AppUserSettings {
  appUserSettingsId String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @unique

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("appUserSettings")
}

model Payment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  priceId   String
  sessionId String
  productId String

  productName     String
  amountReceived  Int
  currency        String
  status          String
  paymentMethodId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appUser AppUser @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("payments")
}

model ThemeOwner {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String @unique

  position Int
  visible  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Themes    Theme[]

  @@map("themesOwners")
}

model Theme {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  themeOwnerId String @db.ObjectId
  themeName    String
  themeColors  String // JSON stringified object, Record<ThemeType, ThemePalette>

  primaryColor String?

  visible Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner  ThemeOwner   @relation(fields: [themeOwnerId], references: [id], onDelete: Cascade)
  visits ThemeVisit[]

  @@map("theme")
}

model ThemeVisit {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  themeId String  @db.ObjectId
  userId  String?

  visitedAt DateTime @default(now()) @map("visited_at")

  theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@map("themesVisits")
}

model Rating {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId   String
  rating   Int
  comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
}

model Report {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  themeId String

  comments String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reports")
}

model copy {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String
  themeId String?
  colors  String? // JSON stringified object, Record<ThemeType, ThemePalette>

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("copies")
}
